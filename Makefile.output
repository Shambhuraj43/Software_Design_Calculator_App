#----------------------------------------------------------------------------
#       Macros
#----------------------------------------------------------------------------
CC            = gcc
CXX           = g++
LD            = $(CXX) $(CCFLAGS) $(CPPFLAGS)
AR            = ar
PICFLAGS      = -fPIC
CPPFLAGS      = $(PICFLAGS) $(GENFLAGS) -std=c++11 -D_REENTRANT
OBJEXT        = .o
OUTPUT_OPTION = -o "$@"
COMPILE.c     = $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE.cc    = $(CXX) $(CCFLAGS) $(CPPFLAGS) -c
LDFLAGS       = -L"."
CCC           = $(CXX)
MAKEFILE      = Makefile.output
DEPENDENCIES  = .depend.$(MAKEFILE)
BTARGETDIR    = ./
BIN           = $(BTARGETDIR)output$(EXESUFFIX)$(EXEEXT)
CAT           = cat
MV            = mv -f
RM            = rm -rf
CP            = cp -p
NUL           = /dev/null
MKDIR         = mkdir -p
TESTDIRSTART  = test -d
TESTDIREND    = ||
TOUCH         = touch
EXEEXT        = 
LIBPREFIX     = lib
LIBSUFFIX     = 
GENFLAGS      = -O
LDLIBS        = -ldl $(subst lib,-l,$(sort $(basename $(notdir $(wildcard /usr/lib/librt.so /lib/librt.so))))) -lpthread
OBJS          = driver$(OBJEXT) Calculate$(OBJEXT) ExprNumber$(OBJEXT) BinaryExprCommand$(OBJEXT) UnaryExprCommand$(OBJEXT) Add$(OBJEXT) Subtract$(OBJEXT) Multiply$(OBJEXT) Divide$(OBJEXT) Mod$(OBJEXT) Number$(OBJEXT) CommandsFactory$(OBJEXT) CommandInterface$(OBJEXT) ExprStackIt$(OBJEXT)
SRC           = driver.cpp Calculate.cpp ExprNumber.cpp BinaryExprCommand.cpp UnaryExprCommand.cpp Add.cpp Subtract.cpp Multiply.cpp Divide.cpp Mod.cpp Number.cpp CommandsFactory.cpp CommandInterface.cpp ExprStackIt.cpp
LINK.cc       = $(LD) $(LDFLAGS)
EXPORTFLAGS   = 
DEPLIBS       = $(foreach lib, , $(foreach libpath, ., $(wildcard $(libpath)/lib$(lib).a)))

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------

all: $(BIN)

$(BIN): $(OBJS) $(DEPLIBS)
	@$(TESTDIRSTART) "$(BTARGETDIR)" $(TESTDIREND) $(MKDIR) "$(BTARGETDIR)"
	$(LINK.cc) $(OBJS) $(LDLIBS) $(OUTPUT_OPTION)

generated: $(GENERATED_DIRTY)
	@-:

driver$(OBJEXT): driver.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) driver.cpp

Calculate$(OBJEXT): Calculate.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Calculate.cpp

ExprNumber$(OBJEXT): ExprNumber.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) ExprNumber.cpp

BinaryExprCommand$(OBJEXT): BinaryExprCommand.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) BinaryExprCommand.cpp

UnaryExprCommand$(OBJEXT): UnaryExprCommand.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) UnaryExprCommand.cpp

Add$(OBJEXT): Add.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Add.cpp

Subtract$(OBJEXT): Subtract.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Subtract.cpp

Multiply$(OBJEXT): Multiply.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Multiply.cpp

Divide$(OBJEXT): Divide.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Divide.cpp

Mod$(OBJEXT): Mod.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Mod.cpp

Number$(OBJEXT): Number.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Number.cpp

CommandsFactory$(OBJEXT): CommandsFactory.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) CommandsFactory.cpp

CommandInterface$(OBJEXT): CommandInterface.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) CommandInterface.cpp

ExprStackIt$(OBJEXT): ExprStackIt.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) ExprStackIt.cpp

clean:
	-$(RM) $(OBJS)

realclean: clean
	-$(RM) $(BIN)

check-syntax:
	$(COMPILE.cc) $(EXPORTFLAGS) -Wall -Wextra -pedantic -fsyntax-only $(CHK_SOURCES)

#----------------------------------------------------------------------------
#       Dependencies
#----------------------------------------------------------------------------


depend:
	-$(MPC_ROOT)/depgen.pl  $(CFLAGS) $(CCFLAGS) $(CPPFLAGS) -f $(DEPENDENCIES) $(SRC) 2> $(NUL)

-include $(DEPENDENCIES)
